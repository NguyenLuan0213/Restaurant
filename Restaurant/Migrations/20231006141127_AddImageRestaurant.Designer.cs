// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant.Data;

#nullable disable

namespace Restaurant.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20231006141127_AddImageRestaurant")]
    partial class AddImageRestaurant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Restaurant.Models.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.Identity.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("bill_date");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .UseCollation("ascii_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<Guid?>("CustomerId"), "ascii");

                    b.Property<decimal?>("DiscountAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("discount_amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("promotion_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "fk_bill_customer_idx");

                    b.HasIndex(new[] { "OrderId" }, "fk_bill_order_idx");

                    b.HasIndex(new[] { "PromotionId" }, "fk_bill_promotion_idx");

                    b.ToTable("bill", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateOnly>("CommentDate")
                        .HasColumnType("date")
                        .HasColumnName("comment_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("customer_id")
                        .UseCollation("ascii_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<Guid>("CustomerId"), "ascii");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("restaurant_id");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text")
                        .HasColumnName("review_text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "fk_coment_customer_idx");

                    b.HasIndex(new[] { "RestaurantId" }, "fk_coment_restaurant_idx");

                    b.ToTable("comment", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Mean", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("totalPrice");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("mean", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Meanitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("MeanId")
                        .HasColumnType("int")
                        .HasColumnName("mean_id");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int")
                        .HasColumnName("menuItem_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("totalPrice");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MeanId" }, "fk_meanItem_mean_idx");

                    b.HasIndex(new[] { "MenuItemId" }, "fk_meanItem_menuItem_idx");

                    b.ToTable("meanitem", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("restaurant_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RestaurantId" }, "fk_menu_restaurant_idx");

                    b.ToTable("menu", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Menuitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasColumnName("menu_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MenuId" }, "fk_menu_menus_idx");

                    b.ToTable("menuitem", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("CashierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("cashier_id")
                        .UseCollation("ascii_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<Guid?>("CashierId"), "ascii");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("order_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('Chưa thanh toán','Đã thanh toán','Đã hủy')")
                        .HasColumnName("status");

                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("table_id");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("totalPrice");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CashierId" }, "fk_order_cashier_idx");

                    b.HasIndex(new[] { "TableId" }, "fk_order_tables_idx");

                    b.ToTable("orders", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Discount")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("end_date");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("promotion_name");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("restaurant_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RestaurantId" }, "fk_promotion_restaurant_idx");

                    b.ToTable("promotion", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Restaurantsbr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("restaurantsbr", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("IdWaiter")
                        .HasColumnType("char(36)")
                        .HasColumnName("id_waiter")
                        .UseCollation("ascii_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<Guid?>("IdWaiter"), "ascii");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("restaurant_id");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('Chưa đặt','Đang đặt')")
                        .HasColumnName("status");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int")
                        .HasColumnName("table_number");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdWaiter" }, "fk_idwaiterx");

                    b.HasIndex(new[] { "RestaurantId" }, "fk_restaurant_idx");

                    b.ToTable("tables", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Restaurant.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("BrithDay")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Fullname")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Restaurant.Models.Identity.RoleClaim", b =>
                {
                    b.HasOne("Restaurant.Models.Identity.Role", "Roles")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Restaurant.Models.Identity.UserClaim", b =>
                {
                    b.HasOne("Restaurant.Models.Users.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurant.Models.Identity.UserLogin", b =>
                {
                    b.HasOne("Restaurant.Models.Users.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurant.Models.Identity.UserRole", b =>
                {
                    b.HasOne("Restaurant.Models.Identity.Role", "Roles")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Models.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurant.Models.Identity.UserToken", b =>
                {
                    b.HasOne("Restaurant.Models.Users.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Bill", b =>
                {
                    b.HasOne("Restaurant.Models.Users.User", "Customer")
                        .WithMany("Bills")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_bill_customer");

                    b.HasOne("Restaurant.Models.RestaurantModels.Order", "Order")
                        .WithMany("Bills")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("fk_bill_order");

                    b.HasOne("Restaurant.Models.RestaurantModels.Promotion", "Promotion")
                        .WithMany("Bills")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("fk_bill_promotion");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Comment", b =>
                {
                    b.HasOne("Restaurant.Models.Users.User", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_coment_customer");

                    b.HasOne("Restaurant.Models.RestaurantModels.Restaurantsbr", "Restaurant")
                        .WithMany("Comments")
                        .HasForeignKey("RestaurantId")
                        .IsRequired()
                        .HasConstraintName("fk_coment_restaurant");

                    b.Navigation("Customer");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Mean", b =>
                {
                    b.HasOne("Restaurant.Models.RestaurantModels.Order", "Order")
                        .WithOne("Means")
                        .HasForeignKey("Restaurant.Models.RestaurantModels.Mean", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mean_order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Meanitem", b =>
                {
                    b.HasOne("Restaurant.Models.RestaurantModels.Mean", "Mean")
                        .WithMany("Meanitems")
                        .HasForeignKey("MeanId")
                        .HasConstraintName("fk_meanItem_mean");

                    b.HasOne("Restaurant.Models.RestaurantModels.Menuitem", "MenuItem")
                        .WithMany("Meanitems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meanItem_menuItem");

                    b.Navigation("Mean");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Menu", b =>
                {
                    b.HasOne("Restaurant.Models.RestaurantModels.Restaurantsbr", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .IsRequired()
                        .HasConstraintName("fk_menu_restaurant");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Menuitem", b =>
                {
                    b.HasOne("Restaurant.Models.RestaurantModels.Menu", "Menu")
                        .WithMany("Menuitems")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("fk_menu_menus");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Order", b =>
                {
                    b.HasOne("Restaurant.Models.Users.User", "Cashier")
                        .WithMany("Orders")
                        .HasForeignKey("CashierId")
                        .HasConstraintName("fk_order_cashier");

                    b.HasOne("Restaurant.Models.RestaurantModels.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .IsRequired()
                        .HasConstraintName("fk_order_tables");

                    b.Navigation("Cashier");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Promotion", b =>
                {
                    b.HasOne("Restaurant.Models.RestaurantModels.Restaurantsbr", "Restaurant")
                        .WithMany("Promotions")
                        .HasForeignKey("RestaurantId")
                        .IsRequired()
                        .HasConstraintName("fk_promotion_restaurant");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Table", b =>
                {
                    b.HasOne("Restaurant.Models.Users.User", "Waiter")
                        .WithMany("Tables")
                        .HasForeignKey("IdWaiter");

                    b.HasOne("Restaurant.Models.RestaurantModels.Restaurantsbr", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .IsRequired()
                        .HasConstraintName("fk_restaurant");

                    b.Navigation("Restaurant");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Restaurant.Models.Identity.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Mean", b =>
                {
                    b.Navigation("Meanitems");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Menu", b =>
                {
                    b.Navigation("Menuitems");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Menuitem", b =>
                {
                    b.Navigation("Meanitems");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Order", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Means");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Promotion", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Restaurantsbr", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Menus");

                    b.Navigation("Promotions");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Restaurant.Models.RestaurantModels.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Restaurant.Models.Users.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Claims");

                    b.Navigation("Comments");

                    b.Navigation("Logins");

                    b.Navigation("Orders");

                    b.Navigation("Tables");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
